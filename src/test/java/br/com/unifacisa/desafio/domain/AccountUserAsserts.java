package br.com.unifacisa.desafio.domain;

import static br.com.unifacisa.desafio.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AccountUserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountUserAllPropertiesEquals(AccountUser expected, AccountUser actual) {
        assertAccountUserAutoGeneratedPropertiesEquals(expected, actual);
        assertAccountUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountUserAllUpdatablePropertiesEquals(AccountUser expected, AccountUser actual) {
        assertAccountUserUpdatableFieldsEquals(expected, actual);
        assertAccountUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountUserAutoGeneratedPropertiesEquals(AccountUser expected, AccountUser actual) {
        assertThat(expected)
            .as("Verify AccountUser auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountUserUpdatableFieldsEquals(AccountUser expected, AccountUser actual) {
        assertThat(expected)
            .as("Verify AccountUser relevant properties")
            .satisfies(e -> assertThat(e.getAccountNumber()).as("check accountNumber").isEqualTo(actual.getAccountNumber()))
            .satisfies(e -> assertThat(e.getAccountType()).as("check accountType").isEqualTo(actual.getAccountType()))
            .satisfies(e ->
                assertThat(e.getBalance()).as("check balance").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBalance())
            )
            .satisfies(e -> assertThat(e.getCreationDate()).as("check creationDate").isEqualTo(actual.getCreationDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountUserUpdatableRelationshipsEquals(AccountUser expected, AccountUser actual) {
        assertThat(expected)
            .as("Verify AccountUser relationships")
            .satisfies(e -> assertThat(e.getOwner()).as("check owner").isEqualTo(actual.getOwner()));
    }
}
